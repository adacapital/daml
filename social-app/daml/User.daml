-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module User where

import Daml.Script hiding(User)

-- MAIN_TEMPLATE_BEGIN
template User with
    username: Party
    following: [Party]
  where
    signatory username
    observer following
-- MAIN_TEMPLATE_END

    key username: Party
    maintainer key

    -- FOLLOW_BEGIN
    nonconsuming choice Follow: ContractId User with
        userToFollow: Party
      controller username
      do
        assertMsg "You cannot follow yourself" (userToFollow /= username)
        assertMsg "You cannot follow the same user twice" (notElem userToFollow following)
        archive self
        create this with following = userToFollow :: following
    -- FOLLOW_END

    -- SENDMESSAGE_BEGIN
    nonconsuming choice SendMessage: ContractId Message with
        sender: Party
        content: Text
      controller sender
      do
        assertMsg "Designated user (recipient) must follow you (sender) to send a message" (elem sender following)
        (senderUserCid, senderUser) <- fetchByKey @User sender
        assertMsg "The sender must follow the recipient" (elem this.username senderUser.following)
        create Message with sender, receiver = username, content
    -- SENDMESSAGE_END

-- ALIAS_BEGIN
template Alias with
    username: Party
    alias: Text
    public: Party
  where
    signatory username
    observer public

    key (username, public) : (Party, Party)
    maintainer key._1

    nonconsuming choice Change: ContractId Alias with
        newAlias: Text
      controller username
      do
        archive self
        create this with alias = newAlias
-- ALIAS_END

-- MESSAGE_TEMPLATE_BEGIN
template Message with
    sender: Party
    receiver: Party
    content: Text
  where
    signatory sender, receiver
-- MESSAGE_TEMPLATE_END

test : Script (ContractId Message)
test = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  charlie <- allocateParty "Charlie"
  c0 <- submit alice $ createCmd User with username = alice, following = []
  submit alice $ archiveCmd c0
  submit alice $ createCmd User with username = alice, following = [bob, charlie]
  submitMustFail bob $ createCmd User with username = alice, following = []
  c1 <- submit bob $ createCmd User with username = bob, following = []
  c2 <- submit bob $ exerciseCmd c1 $ Follow with userToFollow = alice
  submitMustFail alice $ exerciseCmd c2 $ Follow with userToFollow = alice
  submit alice $ exerciseCmd c2 $ SendMessage with sender = alice, content = "Hello Bob!"
